<%= render :partial => "header" %>

<div class="documentation_section_title">
  <%= tr("Mobile Application Authorization Flow") %>
</div>

<div class="documentation_section">
  <p>
    Mobile authentication/authorization flow is very similar to the client-side flow, but it has a slightly different mechanism for handling the response data.
		This document provides details no how to integrate Geni into an iPhone application. Android and other mobile devices work similarly. 
  </p>
  
  <h2>Authentication & Authorization</h2>
  <p> 
    To enter the authentication/authorization mobile flow, launch a browser from your application and pass the following parameters to the authorization url:
  </p>


  <h3>Oauth URL</h3>
  <div class="code_snippet">
    https://www.geni.com/oauth/authorize
  </div>

  <h3>Parameters</h3>
  <p>
  <table class="documentation_table">
     <tr>
      <th style="width:150px;"><%=tr("Param Name") %></th>
      <th><%=tr("Description") %></th>
      <th style="width:150px;"><%=tr("Required") %></th>
     </tr>
     <tr>
      <td>client_id</td>
      <td>Application key generated during the app registration.</td>
      <td>true</td>
     </tr>
     <tr>
      <td>redirect_uri</td>
      <td>Url that the user's browser will be redirected back to once app authorization is completed. You can specify this url in app settings as a Callback URL, or pass it as a paremeter. 
      If you pass it as a parameter, parameter value will be used and the app setting will be ignored. The redirect_uri must be within the same domain as the Site Domain you specify in the application settings.</td>
      <td>true</td>
     </tr>
     <tr>
      <td>response_type</td>
      <td>For the client side flow the response type must be set to "token".</td>
      <td>true</td>
     </tr>
     <tr>
      <td>display</td>
      <td>For the server side flow the display parameter is defaulted to "mobile"</td>
      <td>true</td>
     </tr>
     <tr>
      <td>scope</td>
      <td>A comma delimited list of permissions that the application needs. By default the scope is to set to a full permission set. This is subject to change in the upcoming releases.</td>
      <td>false</td>
     </tr>
  </table>
  </p>
	
  <h3>Example</h3>
  <div class="code_snippet">
    https://www.geni.com/oauth/authorize?client_id=YOUR_APP_ID&redirect_uri=YOUR_APP_URL&response_type=token&display=mobile
  </div>
	
	<p>
	  Notice a couple of changes. First of all, the display parameter is set to "mobile". This will ensure that the login and the authorization screens will use a mobile layout. 
		Also client_id parameter can be either your app key or your app id. Both of them will result in identifying your application. The app ids are shorter and can be
		used as registered urls of your mobile application.  
	</p>	
	
  <h3>Configuring iOS Callback</h3>
	
	<p>
		To get a callback to your iOS application, you must open your application's properties file and register a custom url:
	</p>	
	
<pre class="code_snippet">
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
&lt;plist version="1.0">
&lt;dict>
	...
  &lt;key>CFBundleURLTypes&lt;/key>
  &lt;array>
    &lt;dict>
      &lt;key>CFBundleTypeRole&lt;/key>
      &lt;string>Editor&lt;/string>
      &lt;key>CFBundleURLName&lt;/key>
      &lt;string>&lt;/string>
      &lt;key>CFBundleURLSchemes&lt;/key>
      &lt;array>
        &lt;string>YOUR_APP_ID&lt;/string>
      &lt;/array>
    &lt;/dict>
  &lt;/array>
	...
&lt;/dict>
&lt;/plist>
</pre>

<p>
	When you construct the Oauth URL, you can provide a redirect URL that will identify your application. See the following example:
</p>

  <h3>Example</h3>
<pre class="code_snippet">
NSString *geniOauthBaseURL = @"https://www.geni.com/oauth/authorize";

NSString *yourAppURL = [NSString stringWithFormat: @"%@/authorize", YOUR_APP_ID];

NSString *geniOauthURL = [NSString stringWithFormat:@"%@?client_id=%@&redirect_uri=%@&response_type=token&display=mobile", 
                                                    geniOauthBaseURL, YOUR_APP_ID, yourAppURL];
                         
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:geniOauthURL]];
</pre>
	
  <p>
    If the user is already logged in, we validate the login cookie that we have stored on the user's browser, authenticating the user. If the user is not logged in, they are prompted to enter their credentials:
  </p>  
  
  <center>
  <%=image_tag("/platform/images/help/login_iphone.png", :style=>"width:300px;")%>
  </center>
  
  <p>
    Once we have successfully authenticated the user, we will prompt the user to authorize your application:
  </p>
  
  <center>
  <%=image_tag("/platform/images/help/auth_iphone.png", :style=>"width:300px;")%>
  </center>
  
	
<h3>Handling iOS Application Callback</h3>	
<p>
	To handle application callback, add the following code to your iOS application delegate: 
</p>	

<pre class="code_snippet">
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *) url {
	NSLog(@"Did come back from other application");
	
	// If the URL's structure doesn't match the structure used for Geni authorization, abort.
	if (![[url absoluteString] hasPrefix:[NSString stringWithFormat:@"%@://authorize", YOUR_APP_ID]]) {
	    return NO;
	}
	
	NSString *query = [url fragment];
	if (!query) {
	    query = [url query];
	}
	
	// parse parameters
	NSArray *pairs = [query componentsSeparatedByString:@"&"];
	NSMutableDictionary *params = [[[NSMutableDictionary alloc] init] autorelease];
	for (NSString *pair in pairs) {
	  NSArray *kv = [pair componentsSeparatedByString:@"="];
	  NSString *val = [[kv objectAtIndex:1]
	       stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
	      
	  [params setObject:val forKey:[kv objectAtIndex:0]];
	}
	
	// get access token
	NSString *accessToken = [params valueForKey:@"access_token"];
	
	// If the URL doesn't contain the access token, an error has occurred.
	if (!accessToken) {  // handle error
      
	  return YES;
	}
	
	// store access token
	
	return YES;
}
</pre>	

  <h3><%=tr("Returned Fields") %></h3>
  <p>
  <table class="documentation_table">
     <tr>
      <th style="width:150px;"><%=tr("Name") %></th>
      <th style="width:150px;"><%=tr("Type") %></th>
      <th><%=tr("Description") %></th>
     </tr>
     <tr>
      <td style="widtd:150px;">status</td>
      <td style="widtd:150px;">String</td>
      <td>If user cancels tde autdorization flow, tde status will be set to "unauthorized"</td>
     </tr>
     <tr>
      <td style="widtd:150px;">message</td>
      <td style="widtd:150px;">String</td>
      <td>Error message</td>
     </tr>
  </table>
  </p>

  <h3>Example</h3>
  <div class="code_snippet">
   YOUR_APP_ID://authorize?status=unauthorized&message=user+canceled
  </div>
    
  <p> 
    If the user presses Allow, your app is authorized. The user will be redirected (via HTTP 302) to the URL you passed in the redirect_uri with an access token as a URI fragment:
  </p>

  <h3><%=tr("Returned Fields") %></h3>
  <p>
  <table class="documentation_table">
     <tr>
      <th style="width:150px;"><%=tr("Name") %></th>
      <th style="width:150px;"><%=tr("Type") %></th>
      <th><%=tr("Description") %></th>
     </tr>
     <tr>
      <td style="widtd:150px;">access_token</td>
      <td style="widtd:150px;">String</td>
      <td>Access token to be used with every request to Geni API. It must be passed as a parameter:
         https://www.geni.com/api/profile?access_token=ACCESS_TOKEN
      </td>
     </tr>
     <tr>
      <td style="widtd:150px;">expires_in</td>
      <td style="widtd:150px;">Number</td>
      <td>Seconds until the token will expire</td>
     </tr>
  </table>     
  </p>      

  <h3>Example</h3>
  <div class="code_snippet">
    YOUR_APP_ID://authorize?access_token=ACCESS_TOKEN_GENERATED_BY_SERVER&expires_in=SECONDS_UNTIL_IT_IS_EXPIRED
  </div>
	
	
	<h3>Geni iOS Client SDK</h3>
	<p>
	  Geni comes with a <%=link_to("full featured iOS library", :action => :sdk_ios)%> that allows you to build dynamic iOS applications using Geni's data. 
	  The SDK supports authentication, autherization and API calls to get Geni data. 
	</p>
	
</div>

<%= render :partial => "footer" %>
