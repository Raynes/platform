<%= render :partial => "/platform/developer/common/header" %>

<style>

.field {
	margin-bottom:1px;
}

.field_name_container {
  padding-right:2px;	
}

.field_name {
	width:150px;
	font-size:12px;
}

.field_action {
  padding-left:5px;
  padding-top:5px;
}
	
.field_value {
	width:400px;
	font-size:12px;
}	

.obj_key {
  padding-right: 10px;
	color: #444;
}

.obj_value_string {
	color: green;
}

.obj_value_string {
  color: green;
}

.obj_value_boolean {
  color: blue;
}

.obj_value_number {
  color: red;
}

.response_data {
	font-size:12px;
	overflow:auto;
	font-family:Arial;
	padding:10px;
	height:450px;
	background-color:#F2F2F2;
}

.status {
	height:10px;
	background-color:#EFF8FF;
	color: #444;
}

.error {
	color:red;
}

.api_url {

}

.api_options {
  position: absolute;
	top: 0;
	left: 0;
	font-family: verdana; 
	font-size:11px; 
	width: 765px;
	background: #f4f4f4;
	border:solid 1px #e8e8e8;
	border-color:#e8e8e8 #bababa #bababa #e8e8e8;
	padding: 0;
	margin: 0;
	z-index: 10000;
	-webkit-box-shadow:2px 2px 3px rgba(0,0,0,0.6);
	-moz-box-shadow:2px 2px 3px rgba(0,0,0,0.6);
	box-shadow:2px 2px 3px rgba(0,0,0,0.6);
	display:none;
}

.api_options .inner  {
	background:#fff;
	border:solid 1px #bababa;
	border-color:#bababa #e8e8e8 #e8e8e8 #bababa;
	padding:5px;
	-moz-border-radius:2px;
	-webkit-border-radius:2px;
	border-radius:2px;
	font-size:11px;
}

.api_list {
	padding-left:10px;
}

.api_method_list {
  padding-left:30px;
	padding-bottom:10px;
}

.api_history {
	
}

.api_history th {
  text-align:left;
	font-weight:bold;
	padding:3px;
	border-bottom: 1px solid #ccc;
	font-size:10px;
}

.api_history td {
  padding:3px;
  border-bottom: 1px dotted #ccc;
	cursor:pointer;
	font-size:10px;
}

.api_history .api_row {
}

.api_history .api_row:hover {
	background-color: #eee;
}

.api_history .selected_row {
	background-color: #EFF8FF;
}

.expander {
	cursor:pointer;
	padding-right:3px;
}
</style>

<div class="section_title">
  <div style="float:right; padding-top:6px; font-size:12px; color: #ccc;">
  </div>
  
  <%=tr("#{Platform::Config.site_info[:title]} API Explorer", nil) %>  
</div>

<% form_tag() do %>
<div class="section_box">
	<table style="width:100%">
		<tr>
			<td style="width:100px; vertical-align:middle"><%=tr("Access Token:")%></td>
			<td><%=text_field_tag(:access_token, "", :label=>"Paste an existing Access Token, or click to generate one", :style=>"width:660px;")%> &nbsp;
			   <%=link_to_function("X", "")%> 
			</td>
			<td style="width:150px; text-align:right;">
				<%= link_to_function(trl('Get Access Token', 'Client application action label'), "", :class=>'button super blue medium') %>
			</td>
		</tr>
	</table>

  <div class="section_box" style="background-color:#EFF8FF">
  	<table>
  		<tr>
  			<td style="width:70px;">
				  <%=select_tag("request_method", options_for_select(['GET', 'POST', 'PUT', 'DELETE'], params[:method] || 'GET'), :onChange=>"switchRequestMethod()")%>
  			</td>
				<td style="border:1px solid #ccc;padding:0px;margin:0px;font-size:12px;color:#888;vertical-align:middle; background-color:white;">
				  <span style="float:right;padding-right:5px;"><%=link_to_function(image_tag("/platform/images/arrow_down.gif"), "toggleApiOptions(this)")%></span>
				  <span style="padding-left:5px;vertical-align:middle;white-space:nowrap;">http://<%=Platform::Config.api_base_url%></span><%=text_field_tag(:api_path, params[:path], :style=>"width:580px;border:0px;padding:0px;margin:0px;font-size:12px;vertical-align:middle;", :onKeyUp=>"if (event.keyCode == 13) {api_history_index=-1; submitRequest();}")%>			
				</td>
				<td style="padding-left:5px;text-align:right;">
          <%= link_to_function(trl('Submit', 'Client application action label'), "api_history_index=-1; submitRequest();", :class=>'button super blue medium') %>
				</td>
  		</tr>
			<tr>
				<td></td>
				<td colspan="2">
					<div style="padding-top:5px;" id="post_params">
					  <div id="post_fields">
					  </div>
						<div style="padding-top:5px;">
				      <%=link_to_function("+ add a param", "addPostField('', '')")%>
							<span id="remove_all_params_link" style="display:none">
								| 
								<%=link_to_function("remove all", "removeAllPostFields()")%>
							</span>
						</div>
					</div>
				</td>
			</tr>
  	</table>
  </div>	

  <div style="font-size:12px; background-color:#eee;padding:3px;border:1px dotted #ccc;">
	  <div style="float:right;"> 
	    <%=link_to_function('<<', "makePreviousCall()", :class=>"button super gray small", :id => "history_previous") %>
	    <%=link_to_function('>>', "makeNextCall()", :class=>"button super gray small", :id => "history_next") %>
  	  <%=link_to_function(image_tag("/platform/images/arrow_down.gif", :style=>"vertical-align:middle"), "toggleApiHistory(this)", :class=>"button super gray small")%>
		</div>
		
		<%=link_to_function(image_tag("/platform/images/clipboard_icon.gif", :style=>"height:14px;"), "copyToClipboard(this)", :class=>"button super gray small", :id => "") %>
    <%=link_to_function(image_tag("/platform/images/world_link.png", :style=>"height:14px;"), "copyUrlToClipboard(this)", :class=>"button super gray small", :id => "") %>
    <%=link_to_function(image_tag("/platform/images/minus_node.png", :style=>"height:14px;"), "expandAllResultObjects(false)", :class=>"button super gray small", :id => "") %>
    <%=link_to_function(image_tag("/platform/images/plus_node.png", :style=>"height:14px;"), "expandAllResultObjects(true)", :class=>"button super gray small", :id => "") %>
  </div>	
  <div class="section_box response_data" id="response_data" style="margin-top:5px;">
    
  </div>
	
  <div class="section_box status" id="status" style="margin-bottom:0px;">
      
  </div>
	
</div>
<% end %>

<div id="api_options" class="api_options" style="display:none;">
	<div id="api" class="inner">
    <%=render :partial => "api_methods" %>
	</div>
</div>

<div id="api_history" class="api_options" style="display:none;">
  <div id="api_history_container" class="inner">
  </div>
</div>

<div id="api_clipboard" class="api_options" style="display:none;">
  <div id="api_clipboard_container" class="inner">
  	<%=text_area_tag("api_clipboard_text", "", :style => "width:745px;height:300px;")%>
		<div style="padding-top:5px;color:#444;">
		  <%=tr("Use ctrl+c to copy the contents of the text area to your clipboard.")%>
		</div>
  </div>
</div>

<script>
var field_count = 0;
var base_api_url = "<%=Platform::Config.api_base_url%>";
var api_history = JSON.parse('<%=@api_history%>');
var api_history_index = -1;
var api_result_json = "";
var api_result_object_keys = [];
	
function hidePopups() {
  Platform.Effects.hide("api_clipboard");
	Platform.Effects.hide("api_history");	
  Platform.Effects.hide("api_options"); 
}	

function init() {
	updateHistoryButtons();
	
	<% params.each do |key, value| %>
	 <% next if ['controller', 'action', 'access_token', 'method', 'path'].include?(key) %>
	 addPostField('<%=key%>', '<%=value%>');
	<% end %>
} 

/************************************************************************************
** Clipboard Functions
************************************************************************************/
function copyToClipboard(trigger) {
  Platform.Effects.hide("api_history");
  Platform.Effects.hide("api_options"); 

  var options = Platform.element("api_clipboard");
	
  if (options.style.display == "none") {
    var trigger_position = Platform.Utils.cumulativeOffset(trigger);
    var container_position = {
      left: trigger_position[0] + trigger.offsetWidth - 25 + 'px',
      top: trigger_position[1] + trigger.offsetHeight + 10 + 'px'
    }
    options.style.left = container_position.left;
    options.style.top = container_position.top;
    Platform.Effects.show("api_clipboard");
  } else {
    Platform.Effects.hide("api_clipboard");
  }
	
	Platform.element("api_clipboard_text").value = api_result_json;
	Platform.element("api_clipboard_text").focus();
	Platform.element("api_clipboard_text").select();
}	

function copyUrlToClipboard(trigger) {
  Platform.Effects.hide("api_history");
  Platform.Effects.hide("api_options"); 

  var options = Platform.element("api_clipboard");
  
  if (options.style.display == "none") {
    var trigger_position = Platform.Utils.cumulativeOffset(trigger);
    var container_position = {
      left: trigger_position[0] + trigger.offsetWidth - 25 + 'px',
      top: trigger_position[1] + trigger.offsetHeight + 10 + 'px'
    }
    options.style.left = container_position.left;
    options.style.top = container_position.top;
    Platform.Effects.show("api_clipboard");
  } else {
    Platform.Effects.hide("api_clipboard");
  }
  
  var params = generateRequestParams();
	var link_location = "" + window.location;
	link_location = link_location.split("?")[0];
	link_location = link_location + "?path=" + Platform.value("api_path") + "&method=" + Platform.value("request_method");
	
	for (key in params) {
		if (key == "") continue;
		link_location = link_location + "&" + key + "=" + params[key];
	}
	
  Platform.element("api_clipboard_text").value = link_location;
  Platform.element("api_clipboard_text").focus();
  Platform.element("api_clipboard_text").select();
} 
/************************************************************************************
** API History Functions
************************************************************************************/
function clearApiHistory() {
  setCookie("api_history", "[]");
  setCookie("api_history_index", "-1");
  api_history = [];
  api_history_index = -1;
  hidePopups();
  updateHistoryButtons();
}

function callHistoricApi(index) {
  api_history_index = index;
  var apic = api_history[api_history_index];
  updateApi(apic.path, apic.method, apic.params);
  submitRequest();
	
  updateHistoryButtons();
}

function makePreviousCall() {
	if (api_history.length == 0 || api_history_index == 0) return;
	
	if (api_history_index == -1) {
		callHistoricApi(api_history.length - 1);
  	return;
  }

  callHistoricApi(api_history_index - 1);
}	

function makeNextCall() {
  if (api_history.length == 0 || api_history_index == -1) return;
	if (api_history_index == api_history.length-1) return;

  callHistoricApi(api_history_index + 1);
} 

function updateHistoryButtons() {
	if (api_history_index == -1) {
    Platform.element("history_next").className = "button super gray small";
		if (api_history.length == 0) {
      Platform.element("history_previous").className = "button super gray small";
		} else {
      Platform.element("history_previous").className = "button super blue small";
		}
		return;
	}
	
	if (api_history_index < api_history.length-1) {
    Platform.element("history_next").className = "button super blue small";
	} else {
		Platform.element("history_next").className = "button super gray small";
	}
	
  if (api_history_index > 0 && api_history.length > 1) {
    Platform.element("history_previous").className = "button super blue small";
  } else {
    Platform.element("history_previous").className = "button super gray small";
	}
}

function toggleApiHistory(trigger) {
  Platform.Effects.hide("api_clipboard");
  Platform.Effects.hide("api_options"); 
	
  var options = Platform.element("api_history");
  Platform.element("api_history_container").innerHTML = "<img src='/platform/images/loading.gif' style='width:16px;vertical-align:middle;'>&nbsp;  Loading...";
  
  if (options.style.display == "none") {
    var trigger_position = Platform.Utils.cumulativeOffset(trigger);
    var container_position = {
      left: trigger_position[0] + trigger.offsetWidth - 765 + 'px',
      top: trigger_position[1] + trigger.offsetHeight + 10 + 'px'
    }
    options.style.left = container_position.left;
    options.style.top = container_position.top;
    Platform.Effects.show("api_history");
		
		Platform.Utils.update("api_history_container", "/platform/developer/api_explorer/history", {
			parameters: {api_history_index:api_history_index}
		});
		
  } else {
    Platform.Effects.hide("api_history");
  }
}

function saveCallToHistory(path, method, params) {
	if (api_history_index != -1) {
		updateHistoryButtons();
  	return;
  }
	 
	if (api_history.length > 0) {
  	var last_call = api_history[api_history.length-1];
		if (last_call.path == path && last_call.method == method && equal(last_call.params, params))
		  return;
  }
	
  api_history.push({
    path: path,
    method: method,
    params: params
  });
	
	setCookie("api_history", JSON.stringify(api_history));
	
  if (api_history_index == -1 || api_history_index == (api_history.length-2))
     api_history_index = api_history.length-1;
  
  updateHistoryButtons();
}

function setCookie( name, value, expires, path, domain, secure ) {
  var today = new Date();
  today.setTime( today.getTime() );

  if (expires) {
    expires = expires * 1000 * 60 * 60 * 24;
  }
  var expires_date = new Date( today.getTime() + (expires) );

  document.cookie = name + "=" +escape( value ) +
    ( ( expires ) ? ";expires=" + expires_date.toGMTString() : "" ) +
    ( ( path ) ? ";path=" + path : "" ) +
    ( ( domain ) ? ";domain=" + domain : "" ) +
    ( ( secure ) ? ";secure" : "" );
}


/************************************************************************************
** API Form Functions
************************************************************************************/
function updateStatus(msg) {
	Platform.element("status").innerHTML = msg;
}	

function logInfo(msg) {
  updateStatus("<span class='info'>" + msg + "</span>");
} 
	
function logError(msg) {
	updateStatus("<span class='error'>" + msg + "</span>");
}	

function switchRequestMethod() {
/*
	if (Platform.value("request_method") == "GET") {
		Platform.Effects.hide("post_params");
	} else {
		Platform.Effects.show("post_params");
	}
*/	
}	

function addPostField(name, value) {
	var fields = Platform.element("post_fields");
	var field = document.createElement("div");
  field.id="field" + field_count;
  field.className="field";
	
  var field_name_container = document.createElement("span");
  field_name_container.className="field_name_container";

  var field_name = document.createElement("input");
	field_name.type="text";
	field_name.className="field_name";
	field_name.id="field_name" + field_count;
	field_name.label="name";
	field_name.value = name;
  field_name_container.appendChild(field_name);
  field.appendChild(field_name_container);

  var field_value = document.createElement("input");
  field_value.type="text";
  field_value.className="field_value";
  field_value.id="field_value" + field_count;
  field_value.value = value;
  field_value.label="value";
  field.appendChild(field_value);

  var field_action = document.createElement("a");
	field_action.setAttribute("onclick", "removePostField(" + field_count + "); return false;");
	field_action.innerHTML="<span>X</span>";
  field_action.className="field_action";
  field_action.id="field_action" + field_count;
	field_action.href="#";
  field.appendChild(field_action);
	
	fields.appendChild(field);
	field_count++;
	
	Platform.Effects.show('remove_all_params_link');
}

function removeAllPostFields() {
	var fields = Platform.element("post_fields");
	fields.innerHTML = "";
	field_count = 0;

  Platform.Effects.hide('remove_all_params_link');
}
	
function removePostField(field_index) {
  var fields = Platform.element("post_fields");
	var field = Platform.element("field" + field_index);
	fields.removeChild(field);
	
	field_index ++;
	var next_field = Platform.element("field" + field_index);
	while (next_field) {
		next_field.id="field" + (field_index-1);
		var field_name = Platform.element("field_name" + field_index);
    field_name.id="field_name" + (field_index-1);
    var field_value = Platform.element("field_value" + field_index);
    field_value.id="field_value" + (field_index-1);
    var field_action = Platform.element("field_action" + field_index);
    field_action.id="field_action" + (field_index-1);
    field_action.setAttribute("onclick", "removePostField(" + (field_index-1) + "); return false;");
	  field_index ++;	
		next_field = Platform.element("field" + field_index);
	} 
	
	field_count--;
	
	if (field_count == 0) {
    Platform.Effects.hide('remove_all_params_link');
	}
}

/************************************************************************************
** API Call Functions
************************************************************************************/
function generateRequestParams() {
	var params = {};
	var field_index = 0;
	
  var field = Platform.element("field" + field_index);
  while (field) {
    var field_name = Platform.value("field_name" + field_index);
    var field_value = Platform.value("field_value" + field_index);
		params[field_name] = field_value;
		
		field_index ++;
    field = Platform.element("field" + field_index);
  } 
	
	return params;
}

function submitRequest() {
	hidePopups();
	
	logInfo("Executing request...");
	Platform.element("response_data").innerHTML = "<img src='/platform/images/loading.gif' style='width:16px;vertical-align:middle;'>&nbsp;  Loading...";
	
	var params = generateRequestParams();
	// add access token
	
	saveCallToHistory(Platform.value("api_path"), Platform.value("request_method"), params);
	
	var t0 = new Date();
	Platform.Utils.ajax("http://" + base_api_url + Platform.value("api_path"), {
	   method: Platform.value("request_method"),
		 parameters: params,
		 onSuccess: function(response) {
		 	  var t1 = new Date();
        logInfo("Request took " + (t1.getTime() - t0.getTime()) + " milliseconds");
		 	  formatResponse(response.responseText);
		 }, 	
     onFailure: function(response) {
        logError("API call failed with status: " +  response.status);
        formatResponse(response.responseText);
     }  
	});
}

function updateApi(path, method, params) {
	hidePopups();
	
  if (path.indexOf(base_api_url) != -1) {
    var parts = path.split(base_api_url);
    path = parts[parts.length-1];
  }

  logInfo("");
  Platform.element("response_data").innerHTML = "";
  Platform.element("api_path").value = path;
	Platform.element("request_method").value = method;
	switchRequestMethod();
	removeAllPostFields();
	for (key in params) {
		addPostField(key, params[key]);
	}
}

function callApi(path, method, params) {
	api_history_index = -1;
  updateApi(path, method, params);
  submitRequest();
}

/************************************************************************************
** Format Response Functions
************************************************************************************/
function S4() {
   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
}

function guid() {
   return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}

function showObject(obj_key, flag) {
  if (flag) {
    Platform.Effects.hide("no_object_" + obj_key);
    Platform.Effects.show("object_" + obj_key);
    Platform.element("expander_" + obj_key).innerHTML = "<img src='/platform/images/minus_node.png'>";
  } else {
    Platform.Effects.hide("object_" + obj_key);
    Platform.Effects.show("no_object_" + obj_key);
    Platform.element("expander_" + obj_key).innerHTML = "<img src='/platform/images/plus_node.png'>";
  } 
}

function toggleObject(obj_key) {
	showObject(obj_key, (Platform.element("object_" + obj_key).style.display == 'none'));
}

function expandAllResultObjects(flag) {
	for (var i=0; i<api_result_object_keys.length; i++) {
    showObject(api_result_object_keys[i], flag);
	}
}

function formatResponse(response_text) {
  api_result_json = response_text;
  api_result_object_keys = [];
	
	var response = response_text;
	
	if (typeof response_text == 'string') {
		try {
			response = eval("[" + response_text + "]")[0];
		} 
		catch (err) {
			Platform.element("response_data").innerText = response_text;
			return;
		}
  }
	
	if (typeof response == 'object') {
		Platform.element("response_data").innerHTML = formatObject(response, 1);
	} else {
		Platform.element("response_data").innerHTML = "Invalid response: " + response_text;
	}
}

function formatObject(obj, level) {
  if (obj == null) return "{<br>}";

  var html = [];
  var obj_key = guid();  
  html.push("<span class='expander' id='expander_" + obj_key + "' onClick=\"toggleObject('" + obj_key + "')\"><img src='/platform/images/minus_node.png'></span> <span style='display:none' id='no_object_" + obj_key + "'>{...}</span> <span id='object_" + obj_key + "'>{");
  api_result_object_keys.push(obj_key);

	var keys = Object.keys(obj).sort();
	
  for (var i=0; i<keys.length; i++) {
 	  key = keys[i];
		if (isObject(obj[key])) {
			if (isArray(obj[key])) {
        html.push(createSpacer(level) + "<span class='obj_key'>" + key + ":</span>" + formatArray(obj[key], level + 1) + ",");
			} else {
        html.push(createSpacer(level) + "<span class='obj_key'>" + key + ":</span>" + formatObject(obj[key], level + 1) + ",");
			}
		} else {
      html.push(createSpacer(level) + formatProperty(key, obj[key]) + ",");
		}
	}
	html.push(createSpacer(level-1) + "}</span>");
	return html.join("<br>");
}

function formatArray(arr, level) {
  var html = [];

  var obj_key = guid();  
  html.push("<span class='expander' id='expander_" + obj_key + "' onClick=\"toggleObject('" + obj_key + "')\"><img src='/platform/images/minus_node.png'></span> <span style='display:none' id='no_object_" + obj_key + "'>[...]</span> <span id='object_" + obj_key + "'>[");
  api_result_object_keys.push(obj_key);

  for (var i=0; i<arr.length; i++) {
    if (isObject(arr[i])) {
      if (isArray(arr[i])) {
			   html.push(createSpacer(level) + formatArray(arr[i], level + 1) + ",");	
	    } else {
			   html.push(createSpacer(level) + formatObject(arr[i], level + 1) + ","); 	
			}			
		} else {
      html.push(createSpacer(level) + formatProperty(null, arr[i]) + ",");
    }
  }  
  html.push(createSpacer(level-1) + "]</span>");
  return html.join("<br>");
}

function createSpacer(level) {
  return "<img src='/platform/images/pixel.gif' style='height:1px;width:" + (level * 20) + "px;'>";
}

function isArray(obj) {
  return !(obj.constructor.toString().indexOf("Array") == -1);
}

function isObject(obj) {
	return (typeof obj == 'object');
}

function isString(obj) {
  return (typeof obj == 'string');
}

function isURL(str) {
	str = "" + str;
  return (str.indexOf("http://") != -1) || (str.indexOf("https://") != -1);
}

function isApiCall(str) {
  str = "" + str;
	return (str.indexOf(base_api_url) != -1);
}

function formatProperty(key, value) {
	var cls = "obj_value_" + (typeof value);
	var value_span = "";
	
	if (isURL(value)) {
		if (isApiCall(value)) {
      value = "<a target='_new' class='api_url' href='#' onclick=\"callApi('" + value + "', 'GET', {}); return false;\">" + value + "</a>";
	  } else {
		  value = "<a target='_new' href='" + value + "'>" + value + "</a>";
	  }
	}
	
	if (isString(value)) 
	  value_span = "<span class='" + cls + "'>\"" + value + "\"</span>";
	else
		value_span = "<span class='" + cls + "'>" + value + "</span>";
		 
	if (key == null)
  	return value_span;
		
  return "<span class='obj_key'>" + key + ":</span>" + value_span;
}

function hideApiOptions() {
	Platform.Effects.hide("api_options");
}

function toggleApiOptions(trigger) {
  Platform.Effects.hide("api_clipboard");
  Platform.Effects.hide("api_history"); 

	var options = Platform.element("api_options");
	
	if (options.style.display == "none") {
  	var trigger_position = Platform.Utils.cumulativeOffset(trigger);
  	var container_position = {
  		left: trigger_position[0] + trigger.offsetWidth - 765 + 'px',
  		top: trigger_position[1] + trigger.offsetHeight + 10 + 'px'
  	}
  	options.style.left = container_position.left;
  	options.style.top = container_position.top;
  	Platform.Effects.show("api_options");
  } else {
		Platform.Effects.hide("api_options");
	}
}


function equal(obj1, obj2) {
	for(p in obj1) {
	  if(typeof(obj2[p])=='undefined') {return false;}
	}

	for(p in obj1) {
	    if (obj1[p]) {
	        switch(typeof(obj1[p])) {
	                case 'object':
	                        if (!equal(obj1[p], x[p])) { return false }; break;
	                case 'function':
	                        if (typeof(obj2[p])=='undefined' || (obj1[p].toString() != obj2[p].toString())) { return false; }; break;
	                default:
	                        if (obj1[p] != obj2[p]) { return false; }
	        }
	    } else {
	        if (obj2[p]) {
	            return false;
	        }
	    }
	}
	
	for(p in obj2) {
	    if(typeof(obj1[p])=='undefined') {return false;}
	}
	
	return true;
}

init();

</script>	

<%= render :partial => "/platform/developer/common/footer" %>